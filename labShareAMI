#!/bin/bash

# joriordan

# Prints the script usage information
function usage
{
    echo "** DO NOT RUN DURING LAB DEPLOYMENTS **
	  labShareAMI [-h]
          --region [-r] REGION
          --ami [-a] ami-1234567890abcdef | all
         
          Shares the AMIs on the primary AV account with the subOrgs in this account.
 
          THIS COMMAND IS RUN REMOTELY ON THE SCRIPT SERVER AS IT HAS ACCESS TO THE AMIS
"
}

echo "***********************
 DO NOT RUN DURING LAB DEPLOYMENTS 
***********************"

# Read the input from the command.
while [ "$1" != "" ]; do
    case $1 in
        -r | --region )         shift
                                region=$1
                                ;;
        -a | --ami )            shift
                                ami=$1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
    esac
    shift
done

echo "Storing the student subOrg IDs to a local file before sharing"
rootOU=$(aws organizations list-roots --query 'Roots[0].[Id]' --output text)
destOU=$(aws organizations list-organizational-units-for-parent --parent-id $rootOU --query 'OrganizationalUnits[?Name==`Students`].[Id]' --output text)
aws organizations list-accounts-for-parent --parent-id $destOU --output text --query 'Accounts[*].[Id]' > accounts.txt

echo "Storing the dev subOrg IDs to a local file before sharing"
rootOU=$(aws organizations list-roots --query 'Roots[0].[Id]' --output text)
destOU=$(aws organizations list-organizational-units-for-parent --parent-id $rootOU --query 'OrganizationalUnits[?Name==`Development`].[Id]' --output text)
aws organizations list-accounts-for-parent --parent-id $destOU --output text --query 'Accounts[*].[Id]' >> accounts.txt



if [ "$ami" = "all" ]
then
IMAGES=($(aws ec2 describe-images --owners self --query 'Images[*].[ImageId]' --output text --region $region))
else
IMAGES=($ami)
fi

for image in "${IMAGES[@]}"
do
   printf "Modifying "
   aws ec2 describe-images --owners self --query 'Images[*].[Name,ImageId]' --output text --region $region | grep $image
   aws ec2 modify-image-attribute --image-id $image --launch-permission "{\"Remove\": [{\"Group\":\"all\"}]}" --region $region

   SUBS=($(cat accounts.txt))
   for sub in "${SUBS[@]}"
   do
      printf "."
      aws ec2 modify-image-attribute --image-id $image --launch-permission "Add=[{UserId=$sub}]" --region $region
   done

   echo " "
done

rm accounts.txt
