{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Deploy ANYDC-v3",
	
	"Parameters" : {
		"TrainingVPC": {
			"Description" : "VPC ID of TrainingVPC",
			"Type": "String",
			"ConstraintDescription" : "vpc id"
		},
		"userPassword": {
            "Description" : "Password for User",
            "Type": "String",
            "ConstraintDescription" : "user password"
		},
		"account": {
            "Description" : "Account Name",
            "Type": "String",
            "ConstraintDescription" : "account"
		}
	},
	"Mappings": {
		"Linux1RegionMap": {
			"us-east-1": {
				"AMI": "ami-053e42115dfe44911"
			},
			"eu-west-1": {
				"AMI": "ami-ec143995"
			}
		},
        	"Linux2RegionMap": {
            		"us-east-1": {
                		"AMI": "ami-05301508f8bc1fd2b"
            		},
            		"eu-west-1": {
                		"AMI": "ami-8b1a37f2"
            		}
        	},
        	"WindowsRegionMap": {
            		"us-east-1": {
                		"AMI": "ami-0620556e135841d93"
            		},
            		"eu-west-1": {
				"AMI": "ami-ad1a35d4"
            		}
        	},
                "HTML5RegionMap": {
                        "us-east-1": {
                                "AMI": "ami-0c1b9ce4bb5e45959"
                        },
                        "eu-west-1": {
                                "AMI": "ami-12345678"
                        }
                }
	},

	"Resources" : {
		"studentGroup" : {
			"Type" : "AWS::IAM::Group",
			"Properties" : {
				"Path" : "/",
				"Policies" : [ {
					"PolicyName" : "StudentPolicy",
					"PolicyDocument" : {
						"Version": "2012-10-17",
						"Statement": [ {
							"Sid": "CloudFormation",
							"Effect": "Allow",
							"Action": [
								"cloudformation:ListExports",
								"cloudformation:DescribeStackResource",
								"cloudformation:DescribeStackEvents",
								"cloudformation:DescribeChangeSet",
								"cloudformation:ListStackResources",
								"cloudformation:DescribeStackResources",
								"cloudformation:DescribeStacks",
								"cloudformation:GetStackPolicy",
								"cloudformation:GetTemplate",
								"cloudformation:DeleteStack",
								"cloudformation:EstimateTemplateCost",
								"cloudformation:DescribeAccountLimits",
								"cloudformation:ListStacks",
								"cloudformation:ListImports",
								"cloudformation:GetTemplateSummary",
								"cloudformation:CreateStack",
								"cloudformation:PreviewStackUpdate",
								"cloudformation:ListChangeSets",
								"cloudwatch:Describe*",
								"cloudwatch:GetMetricStatistics",
								"cloudwatch:ListMetrics"
							],
							"Resource": "*"
						},
						{	
							"Sid": "EC2",
							"Effect": "Allow",
							"Action": [
								"ec2:AuthorizeSecurityGroupIngress",
								"ec2:CreateKeyPair",
								"ec2:TerminateInstances",
								"ec2:DeleteVolume",
								"ec2:DetachVolume",
								"ec2:ModifyVolumeAttribute",
								"ec2:ImportKeyPair",
								"ec2:CreateTags",
								"ec2:CreateVolume",
								"ec2:AttachVolume",
								"ec2:RunInstances",
								"ec2:RevokeSecurityGroupIngress",
								"ec2:DeleteKeyPair",
								"ec2:CreateSecurityGroup",
								"ec2:Describe*",
								"ec2:AssociateIamInstanceProfile",
								"ec2:DeleteSecurityGroup",
								"ec2:ReplaceIamInstanceProfileAssociation",
								"ec2:DeleteFlowLogs",
								"ec2:CreateFlowLogs",
								"ec2:DescribeFlowLogs",
								"ec2:RebootInstances"
							],
							"Resource": "*"
						},
						{
							"Effect": "Allow",
							"Action": [
								"s3:CreateBucket",
								"s3:Delete*",
								"s3:Get*",
								"s3:List*",
								"s3:PutBucketPolicy",
								"cloudtrail:*",
								"logs:CreateLogGroup",
								"logs:DeleteLogGroup",
								"iam:GetRolePolicy",
								"iam:GetUser",
								"kms:ListKeys",
								"kms:ListAliases"
							],
							"Resource": "*"
						},
						{
							"Sid": "OtherPermissions",
							"Effect": "Allow",
							"Action": [
								"autoscaling:Describe*",
								"elasticloadbalancing:Describe*",
								"events:ListRuleNamesByTarget",
								"events:ListRules",
								"events:ListTargetsByRule",
								"events:DescribeRule",
								"events:TestEventPattern",
								"iam:RemoveRoleFromInstanceProfile",
								"iam:CreateRole",
								"iam:GetRole",
								"iam:PutRolePolicy",
								"iam:AddRoleToInstanceProfile",
								"iam:DeleteRole",
								"iam:CreateInstanceProfile",
								"iam:PassRole",
								"iam:DeleteRolePolicy",
								"iam:DeleteInstanceProfile",
								"iam:ListRoles",
								"iam:CreatePolicy",
								"iam:ListPolicies",
								"iam:GetPolicyVersion",
								"iam:AttachRolePolicy",
								"iam:ListRolePolicies",
								"iam:ListAttachedRolePolicies",
								"iam:ListInstanceProfiles",
								"iam:UpdateAssumeRolePolicy",
								"logs:Describe*",
								"logs:Get*",
								"logs:FilterLogEvents",
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents",
								"sns:ListTopics"
							],
							"Resource": "*"
						},
						{
							"Sid": "AllowedInstances",
							"Effect": "Deny",
							"Action": "ec2:RunInstances",
							"Resource": "arn:aws:ec2:*:*:instance/*",
							"Condition": {
								"StringNotEquals": {
									"ec2:InstanceType": [
										"t2.micro",
										"t2.medium",
										"t2.large"
									]
								}
							}
						},
						{
							"Sid": "BlockExpensiveDisks",
							"Effect": "Deny",
							"Action": "ec2:CreateVolume",
							"Resource": "*",
							"Condition": {
								"ForAnyValue:StringEqualsIgnoreCase": {
									"ec2:VolumeType": "io1"
								}
							}
						}
						]
					}
				} ]
			}
		},
		"studentUser" : {
   			"Type" : "AWS::IAM::User",
   			"Properties" : {
      			"Path" : "/",
      			"LoginProfile" : {
					"Password" : { "Ref" : "userPassword" }
      			},
			"UserName" : { "Ref" : "account" }
   			}
		},
		"addUserToGroup" : {
   			"Type" : "AWS::IAM::UserToGroupAddition",
   			"Properties" : {
      			"GroupName" : { "Ref" : "studentGroup" },
      			"Users" : [ { "Ref" : "studentUser" } ]
   			}
		},
		"CloudWatchLogsRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Effect": "Allow",
						"Principal": {
							"Service": [ "ec2.amazonaws.com" ]
						},
						"Action": [ "sts:AssumeRole" ]
					} ]
				},
				"Path": "/",
				"ManagedPolicyArns":  ["arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"]
            }
		},
		"CloudWatchProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [ {
					"Ref": "CloudWatchLogsRole"
				} ]
			}
		},
		"TrainingSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "TrainingVPC" },
				"MapPublicIpOnLaunch" : "true",
				"CidrBlock" : "192.168.250.0/25",
				"Tags" : [ {"Key" : "Name", "Value" : "TrainingSubnet"} ]
			}
		},
		"TrainingDHCPOptions" : {
			"Type" : "AWS::EC2::DHCPOptions",
			"Properties" : {
				"DomainName" : "training.lab",
				"DomainNameServers" : [ "192.168.250.14" ]
			}
		},
		"TrainingGateway" : {
			"Type" : "AWS::EC2::InternetGateway",
			"Properties" : {
				"Tags" : [ {"Key" : "Name", "Value" : "TrainingGateway"}]
			}
		},
		"AttachGateway" : {
			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"Properties" : {
				"VpcId" : { "Ref" : "TrainingVPC" },
				"InternetGatewayId" : { "Ref" : "TrainingGateway" }
			}
		},
		"RTableTraining" : {
			"Type" : "AWS::EC2::RouteTable",
			"Properties" : {
				"VpcId" : { "Ref" : "TrainingVPC" },
				"Tags" : [ { "Key" : "Name", "Value" : "RTableTraining" } ]
			}
		},
		"TrainingRoute" : {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : ["TrainingGateway","AttachGateway"],
				"Properties" : {
					"RouteTableId" : { "Ref" : "RTableTraining" },
					"DestinationCidrBlock" : "0.0.0.0/0",
					"GatewayId" : { "Ref" : "TrainingGateway" }
				}
		},
		"TrainingSubnetRouteTableAssociation" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"SubnetId" : { "Ref" : "TrainingSubnet" },
				"RouteTableId" : { "Ref" : "RTableTraining" }
			}
		},
		"DHCPOptionsAssociation" : {
  			"Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
  			"Properties" : {
    				"VpcId" : {"Ref" : "TrainingVPC"},
    				"DhcpOptionsId" : {"Ref" : "TrainingDHCPOptions"}
  			}
		},
		"Linux1Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
                		"ImageId": {
					"Fn::FindInMap": [
						"Linux1RegionMap", {
							"Ref": "AWS::Region"
						},
						"AMI"
					]
				},
				"InstanceType": "t2.micro",
				"IamInstanceProfile" :  {"Ref" : "CloudWatchProfile"},
				"SecurityGroupIds" : [ {"Ref" : "LinuxSecurityGroup"} ],
				"SubnetId": { "Ref" : "TrainingSubnet" },
				"Tags" : [{"Key" : "Name", "Value" : "linux1"}],
				"PrivateIpAddress" : "192.168.250.30",
				"UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             				"#!/bin/bash -xe\n",
             				"echo linux1 > /etc/hostname\n",
             				"echo nameserver 192.168.250.14 > /etc/resolv.conf\n",
             				"echo search training.lab >> /etc/resolv.conf\n",
					"hostname -F /etc/hostname\n",
					"reboot\n"
					]]}}			
			}
		},
		"Linux2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
                "ImageId": {
                                "Fn::FindInMap": [
                                        "Linux2RegionMap", {
                                                "Ref": "AWS::Region"
                                        },
                                        "AMI"
                                ]
                           },
		"InstanceType": "t2.micro",
				"SecurityGroupIds" : [ {"Ref" : "LinuxSecurityGroup"} ],
				"SubnetId": { "Ref" : "TrainingSubnet" },
				"Tags" : [{"Key" : "Name", "Value" : "linux2"}],
				"PrivateIpAddress" : "192.168.250.31",
                                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                                        "#!/bin/bash -xe\n",
                                        "echo linux2 > /etc/hostname\n",
                                        "echo nameserver 192.168.250.14 > /etc/resolv.conf\n",
                                        "echo search training.lab >> /etc/resolv.conf\n",
                                        "hostname -F /etc/hostname\n",
					"reboot\n"
                                        ]]}}
			}
		},
		"HTML5Instance": {
                        "Type": "AWS::EC2::Instance",
                        "Properties": {
                "ImageId": {
                                "Fn::FindInMap": [
                                        "HTML5RegionMap", {
                                                "Ref": "AWS::Region"
                                        },
                                        "AMI"
                                ]
                           },
                "InstanceType": "t2.small",
                                "SecurityGroupIds" : [ {"Ref" : "HTML5SecurityGroup"} ],
                                "SubnetId": { "Ref" : "TrainingSubnet" },
                                "Tags" : [{"Key" : "Name", "Value" : "HTML5"}],
                                "PrivateIpAddress" : "192.168.250.10",
                                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                                        "#!/bin/bash -xe\n",
                                        "echo html5 > /etc/hostname\n",
                                        "echo nameserver 192.168.250.14 > /etc/resolv.conf\n",
                                        "echo search training.lab >> /etc/resolv.conf\n",
                                        "hostname -F /etc/hostname\n",
					"sed -i '0,/Password1!/s//",
					{ "Ref" : "userPassword" },
					"/' /etc/guacamole/user-mapping.xml\n"
                                        ]]}}
                        }
                },
		"WindowsInstance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
                "ImageId": {
                                "Fn::FindInMap": [
                                        "WindowsRegionMap", {
                                                "Ref": "AWS::Region"
                                        },
                                        "AMI"
                                ]
                           },
		"InstanceType": "t2.small",
				"SecurityGroupIds" : [ {"Ref" : "WindowsSecurityGroup"} ],
				"SubnetId": { "Ref" : "TrainingSubnet" },
				"PrivateIpAddress" : "192.168.250.14",
				"Tags" : [{"Key" : "Name", "Value" : "windows"}]
			}
		},
		"LinuxSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
                                "GroupName" : "ANYDC-LinuxSecurityGroup",
				"GroupDescription" : "Enable SSH access via port 22 to the Linux Instance",
				"VpcId" : { "Ref" : "TrainingVPC" },
				"SecurityGroupIngress" : [{"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}]
			}
		},
                "HTML5SecurityGroup" : {
                        "Type" : "AWS::EC2::SecurityGroup",
                        "Properties" : {
                                "GroupName" : "ANYDC-HTML5SecurityGroup",
                                "GroupDescription" : "Enable HTML5 access via port 80",
                                "VpcId" : { "Ref" : "TrainingVPC" },
                                "SecurityGroupIngress" : [{"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},{"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}]
                        }
                },
		"WindowsSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
                                "GroupName" : "ANYDC-WindowsSecurityGroup",
				"GroupDescription" : "Enable RDP access via port 3389 to the Windows Instance and DNS and WinRM internally",
				"VpcId" : { "Ref" : "TrainingVPC" },
				"SecurityGroupIngress" : [{"IpProtocol" : "tcp", "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : "0.0.0.0/0"},{"IpProtocol" : "tcp", "FromPort" : "53", "ToPort" : "53", "CidrIp": "192.168.250.0/24"},{"IpProtocol" : "udp", "FromPort" : "53", "ToPort" : "53", "CidrIp": "192.168.250.0/24"}, {"IpProtocol" : "tcp", "FromPort" : "5985", "ToPort" : "5985", "CidrIp": "192.168.250.0/24"}]
			}
		},
		"CloudLogStack" : {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"Parameters" : {
					"TrainingVPC" : { "Ref" : "TrainingVPC" }
				},
			"TemplateURL": "https://s3-eu-west-1.amazonaws.com/deploy-student-env/cloudLogs.json"
			}
		}
	},
	"Outputs" : {
		"HTML5" : {
                        "Value" : { "Fn::Join" : ["", [{ "Fn::GetAtt" : [ "HTML5Instance", "PublicIp" ]}]] }
                }

	}	
}
